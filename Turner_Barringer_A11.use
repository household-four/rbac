model LRBAC

class User
attributes
    userID : String
operations
    CreateSession() : Session
    DeleteSession(s : Session)
    AssignRole(r : Role)
    DeassignRole(r : Role)
    AssignedRoles() : Set(Role)
    AuthorizedRoles() : Set(Role)
end

class Session
attributes
operations
    AddActiveRole(r : Role)
    DropActiveRole(r : Role)
    CheckAccess(op : Operation, o : Object) : Boolean
    InvokeOperation(obj : Object, op : Operation)
end

class Role
attributes
    roleName : String
operations
    GrantPermission(p : Permission)
    RevokePermission(p : Permission)
    CheckAccess(op : Operation, obj : Object)
    AddAscendant(r : Role)
    DeleteAscendant(r : Role)
    AddDescendant(r : Role)
    DeleteDescendant(r : Role)
    AddSSDRole(r : Role)
    DeleteSSDRole(r : Role)
    AddDSDRole(r : Role)
    DeleteDSDRole(r : Role)
    AssignedUsers() : Set(User)
    AuthorizedUsers() : Set(User)
    Ascendants() : Set(Role)
    Descendants() : Set(Role)
    SSDRoles() : Set(Role)
    DSDRoles() : Set(Role)
end

class Permission
operations
    CheckAccess(op : Operation, obj : Object)
end

class Operation
attributes
    opName : String
end

class Object
attributes
    objName : String
end

class Location
attributes
    locName : String
end

association UserAssignment between
    User[*] role users
    Role[*] role roles
end

association PermAssignment between
    Role[*] role roles
    Permission[*] role permissions
end

association PermOperations between
    Permission[*] role permissions
    Operation[*] role ops
end

association PermObjects between
    Permission[*] role permissions
    Object[*] role objects
end

association ExecuteOn between
    Object[1..*] role objects
    Operation[1..*] role ops
end

association UserSessions between
    User[1] role user
    Session[*] role sessions
end

association SessionRoles between
    Session[*] role sessions
    Role[*] role roles
end

association RoleHierarchy between
    Role[*] role senior
    Role[*] role junior
end

association SSD between
    Role[*] role s_r1
    Role[*] role s_r2
end

association DSD between
    Role[*] role d_r1
    Role[*] role d_r2
end

association PrerequisiteRole between
    Role[*] role role
    Role[*] role prereq
end

association PrerequisitePerm between
    Permission[*] role perm
    Permission[*] role prereq
end

association UserLocation between
    User[1] role user
    Location[1] role location
end

association ObjectLocation between
    Object[1] role object
    Location[1] role location
end

association AssignLocation between
  Role[*] role assignRoles
  Location[1..*] role assignLocation
end

association ActivateLocation between
  Role[*] role activateRoles
  Location[1..*] role activateLocation
end

association PermRoleLoc between
  Permission[*] role rolePermissions
  Location[1..*] role roleLocations
end

association PermObjLoc between
  Permission[*] role objPermissions
  Location[1..*] role objLocations
end

constraints

-- SSD: conflicting roles cannot be assigned to the same user
context User
inv SSD_Role:
    not self.roles->exists(r1, r2 |
        SSD.allInstances()->exists(link |
            (link.s_r1 = r1 and link.s_r2 = r2) or
            (link.s_r1 = r2 and link.s_r2 = r1)
        )
    )

-- DSD: conflicting roles cannot be activated in the same session
context Session
inv DSD_Role:
    not self.roles->exists(r1, r2 |
        DSD.allInstances()->exists(link |
            (link.d_r1 = r1 and link.d_r2 = r2) or
            (link.d_r1 = r2 and link.d_r2 = r1)
        )
    )

-- Cardinality: each session must be linked to exactly one user
context Session
inv OneUserPerSession:
    self.user->size() = 1

-- Cardinality: each user must be assigned at least one role
context User
inv UserHasRole:
    self.roles->notEmpty()

-- Cardinality: each permission must be linked to at least one operation and one object
context Permission
inv PermissionLinks:
    self.ops->notEmpty() and self.objects->notEmpty()

-- Prerequisite-Role: A user can be assigned to a role only if already assigned to its prerequisites
context Role
inv PrerequisiteRole:
    self.users->forAll(u |
        self.prereq->forAll(pr | u.roles->includes(pr))
    )

-- Role Hierarchy: a role inherits permissions from its juniors
context Role
inv RoleHierarchyPermissions:
    self.permissions->includesAll(self.junior->collect(p | p.permissions)->flatten())

-- Prerequisite-Permission: A role can be assigned a permission only if it already has the permissionâ€™s prerequisites
context Role
inv PrerequisitePerm:
    self.permissions->forAll(p |
        p.prereq->forAll(pr | self.permissions->includes(pr))
    )

-- CreateSession (given)
context User::CreateSession() : Session
post:
    result.oclIsNew() and
    self.sessions->includes(result)

-- Check Access
context Session::CheckAccess(op : Operation, o : Object) : Boolean
pre validOp:
  Operation.allInstances()->includes(op)
pre validObj:
  Object.allInstances()->includes(o)

post def:
  result =
    self.roles->exists(r |
        r.permissions->exists(p |
            p.ops->includes(op) and
            p.objects->includes(o) and
            p.roleLocations->includes(self.user.location) and
            p.objLocations->includes(o.location)
        )
    )
