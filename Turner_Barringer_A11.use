model rbac

class User 
attributes
	userID : String
end

class Session 
end

class Role 
attributes
	roleName : String
end

class Permission 
end
	
class Operation 
attributes
	opName : String
end

class Object
attributes
	objName : String
end

association UserAssignment between
    User[*] role users
    Role[*] role roles
end

association PermAssignment between
    Role[*] role roles
    Permission[*] role permissions
end

association PermOperations between
    Permission[*] role permissions
    Operation[*] role ops
end

association PermObjects between
    Permission[*] role permissions
    Object[*] role objects
end

association ExecuteOn between
    Object[*] role objects
    Operation[*] role ops
end

association UserSessions between
    User[1] role user
    Session[*] role sessions
end

association SessionRoles between
    Session[*] role sessions
    Role[*] role roles
end

association RoleHierarchy between
    Role[*] role senior
    Role[*] role junior
end

association SSD between
    Role[*] role s_r1
    Role[*] role s_r2
end

association DSD between
    Role[*] role d_r1
    Role[*] role d_r2
end

constraints

context User
    -- SSD: conflicting roles cannot be assigned to the same user
    inv SSD_Role:
        not self.roles->exists(r1, r2 |
            SSD.allInstances()->exists(link | -- ERROR HERE
                link.s_r1 = r1 and link.s_r2 = r2))

context Session
    -- DSD: conflicting roles cannot be activated in the same session
    inv DSD_Role:
        not self.roles->exists(r1, r2 |
            DSD.allInstances()->exists(link |
            (link.d_r1 = r1 and link.d_r2 = r2)
            or
            (link.d_r1 = r2 and link.d_r2 = r1)
            )
    )

-- TODO constraint still needed: prerequisite roles (pg 5)

-- TODO constraint still needed: cardinality constraints (pg 6)

-- TODO validate that invariants work as intended when actual objects are created


